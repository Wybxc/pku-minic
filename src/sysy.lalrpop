use crate::ast::*;

grammar;

// Lexical rules
match {
  // Skip whitespace and comments
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*([^*]|\*[^/])*\*/" => {},
  // Default rule
  _
}

// Syntax rules

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

Stmt: Stmt = "return" <expr: Expr> ";" => Stmt::Return { <> };

Expr: Expr = <expr: LOrExpr> => <>;

PrimaryExpr: Expr = {
  <num: Number> => Expr::Number(<>),
  "(" <expr: Expr> ")" => <>,
};

UnaryExpr: Expr = {
  <expr: PrimaryExpr> => <>,
  <op: UnaryOp> <expr: UnaryExpr> => Expr::Unary { op, expr: Box::new(expr) },
};

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Pos,
  "-" => UnaryOp::Neg,
  "!" => UnaryOp::Not,
};

MulExpr: Expr = {
  <lhs: MulExpr> <op: MulOp> <rhs: UnaryExpr> => Expr::Binary {
    op,
    lhs: Box::new(lhs),
    rhs: Box::new(rhs),
  },
  <expr: UnaryExpr> => <>,
};

MulOp: BinaryOp = {
  "*" => BinaryOp::Mul,
  "/" => BinaryOp::Div,
  "%" => BinaryOp::Mod,
};

AddExpr: Expr = {
  <lhs: AddExpr> <op: AddOp> <rhs: MulExpr> => Expr::Binary {
    op,
    lhs: Box::new(lhs),
    rhs: Box::new(rhs),
  },
  <expr: MulExpr> => <>,
};

AddOp: BinaryOp = {
  "+" => BinaryOp::Add,
  "-" => BinaryOp::Sub,
};

RelExpr: Expr = {
  <lhs: RelExpr> <op: RelOp> <rhs: AddExpr> => Expr::Binary {
    op,
    lhs: Box::new(lhs),
    rhs: Box::new(rhs),
  },
  <expr: AddExpr> => <>,
};

RelOp: BinaryOp = {
  "<" => BinaryOp::Lt,
  "<=" => BinaryOp::LtEq,
  ">" => BinaryOp::Gt,
  ">=" => BinaryOp::GtEq,
};

EqExpr: Expr = {
  <lhs: EqExpr> <op: EqOp> <rhs: RelExpr> => Expr::Binary {
    op,
    lhs: Box::new(lhs),
    rhs: Box::new(rhs),
  },
  <expr: RelExpr> => <>,
};

EqOp: BinaryOp = {
  "==" => BinaryOp::Eq,
  "!=" => BinaryOp::NotEq,
};

LAndExpr: Expr = {
  <lhs: LAndExpr> "&&" <rhs: EqExpr> => Expr::Binary {
    op: BinaryOp::LAnd,
    lhs: Box::new(lhs),
    rhs: Box::new(rhs),
  },
  <expr: EqExpr> => <>,
};

LOrExpr: Expr = {
  <lhs: LOrExpr> "||" <rhs: LAndExpr> => Expr::Binary {
    op: BinaryOp::LOr,
    lhs: Box::new(lhs),
    rhs: Box::new(rhs),
  },
  <expr: LAndExpr> => <>,
};

Number: i32 = <num: IntConst> => <>;

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
