use crate::ast::*;

grammar;

// Lexical rules
match {
  // Skip whitespace and comments
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*([^*]|\*[^/])*\*/" => {},
  // Default rule
  _
}

// Syntax rules

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { func_type, ident, block }
  }
}

FuncType: Span<FuncType> = <start:@L> "int" <end:@R> => FuncType::Int.into_span(start, end);

Block: Span<Block> = <start:@L> "{" <items: BlockItem*> "}" <end:@R> => Block { items: items.into() }.into_span(start, end);

BlockItem: BlockItem = {
  <stmt: Stmt> => BlockItem::Stmt { <> },
  <decl: Decl> => BlockItem::Decl { <> },
};

Decl: Decl = {
  <const_decl: ConstDecl> => Decl::Const(<>),
  <var_decl: VarDecl> => Decl::Var(<>),
};

BType: Span<BType> = <start:@L> "int" <end:@R> => BType::Int.into_span(start, end);

ConstDecl: Span<ConstDecl> = {
  <start:@L> "const" <ty: BType> <mut defs: (<ConstDef> ",")*> <def: ConstDef> ";" <end:@R> => {
    defs.push(def);
    ConstDecl { ty, defs: defs.into() }.into_span(start, end)
  },
}

ConstDef: ConstDef = {
  <ident: Ident> "=" <expr: ConstExpr> => ConstDef { <> },
};

ConstExpr: ConstExpr = <expr: Expr> => ConstExpr { <> };

VarDecl: Span<VarDecl> = {
  <start:@L> <ty: BType> <mut defs: (<VarDef> ",")*> <def: VarDef> ";" <end:@R> => {
    defs.push(def);
    VarDecl { ty, defs: defs.into() }.into_span(start, end)
  },
}

VarDef: VarDef = {
  <ident: Ident> => VarDef { ident, init: None },
  <ident: Ident> "=" <init: InitVal> => VarDef { ident, init: Some(init) },
};

InitVal: InitVal = {
  <expr: Expr> => InitVal { <> },
};

Stmt: Span<Stmt> = {
  <MatchedIfStmt> => <>,
  <UnmatchedIfStmt> => <>,
};

MatchedIfStmt: Span<Stmt> = {
  <start:@L> <ident: Ident> "=" <expr: Expr> ";" <end:@R> => Stmt::Assign { ident, expr }.into_span(start, end),
  <start:@L> <expr: Expr?> ";" <end:@R> => Stmt::Expr { expr }.into_span(start, end),
  <start:@L> <block: Block> <end:@R> => Stmt::Block { block }.into_span(start, end),
  <start:@L> "if" "(" <cond: Expr> ")" <then: MatchedIfStmt> "else" <els: MatchedIfStmt> <end:@R> => Stmt::If {
    cond,
    then: Box::new(then),
    els: Some(Box::new(els)),
  }.into_span(start, end),
  <start:@L> "while" "(" <cond: Expr> ")" <body: MatchedIfStmt> <end:@R> => Stmt::While {
    cond,
    body: Box::new(body),
  }.into_span(start, end),
  <start:@L> "break" ";" <end:@R> => Stmt::Break(().into_span(start, end)).into_span(start, end),
  <start:@L> "continue" ";" <end:@R> => Stmt::Continue(().into_span(start, end)).into_span(start, end),
  <start:@L> "return" <expr: Expr> ";" <end:@R> => Stmt::Return { expr }.into_span(start, end)
};

UnmatchedIfStmt: Span<Stmt> = {
  <start:@L> "if" "(" <cond: Expr> ")" <then: Stmt> <end:@R> => Stmt::If {
    cond,
    then: Box::new(then),
    els: None,
  }.into_span(start, end),
  <start:@L> "if" "(" <cond: Expr> ")" <then: MatchedIfStmt> "else" <els: UnmatchedIfStmt> <end:@R> => Stmt::If {
    cond,
    then: Box::new(then),
    els: Some(Box::new(els)),
  }.into_span(start, end),
};

Expr: Expr = <expr: LOrExpr> => <>;

PrimaryExpr: Expr = {
  <num: Number> => Expr::Number(<>),
  Ident => Expr::LVar(<>),
  "(" <expr: Expr> ")" => <>,
};

UnaryExpr: Expr = {
  <expr: PrimaryExpr> => <>,
  <op: UnaryOp> <expr: UnaryExpr> => Expr::Unary { op, expr: Box::new(expr) },
};

UnaryOp: Span<UnaryOp> = {
  <start:@L> "+" <end:@R> => UnaryOp::Pos.into_span(start, end),
  <start:@L> "-" <end:@R> => UnaryOp::Neg.into_span(start, end),
  <start:@L> "!" <end:@R> => UnaryOp::Not.into_span(start, end),
};

MulExpr: Expr = {
  <lhs: MulExpr> <op: MulOp> <rhs: UnaryExpr> => Expr::Binary {
    op,
    lhs: Box::new(lhs),
    rhs: Box::new(rhs),
  },
  <expr: UnaryExpr> => <>,
};

MulOp: Span<BinaryOp> = {
  <start:@L> "*" <end:@R> => BinaryOp::Mul.into_span(start, end),
  <start:@L> "/" <end:@R> => BinaryOp::Div.into_span(start, end),
  <start:@L> "%" <end:@R> => BinaryOp::Mod.into_span(start, end),
};

AddExpr: Expr = {
  <lhs: AddExpr> <op: AddOp> <rhs: MulExpr> => Expr::Binary {
    op,
    lhs: Box::new(lhs),
    rhs: Box::new(rhs),
  },
  <expr: MulExpr> => <>,
};

AddOp: Span<BinaryOp> = {
  <start:@L> "+" <end:@R> => BinaryOp::Add.into_span(start, end),
  <start:@L> "-" <end:@R> => BinaryOp::Sub.into_span(start, end),
};

RelExpr: Expr = {
  <lhs: RelExpr> <op: RelOp> <rhs: AddExpr> => Expr::Binary {
    op,
    lhs: Box::new(lhs),
    rhs: Box::new(rhs),
  },
  <expr: AddExpr> => <>,
};

RelOp: Span<BinaryOp> = {
  <start:@L> "<" <end:@R> => BinaryOp::Lt.into_span(start, end),
  <start:@L> "<=" <end:@R> => BinaryOp::Le.into_span(start, end),
  <start:@L> ">" <end:@R> => BinaryOp::Gt.into_span(start, end),
  <start:@L> ">=" <end:@R> => BinaryOp::Ge.into_span(start, end),
};

EqExpr: Expr = {
  <lhs: EqExpr> <op: EqOp> <rhs: RelExpr> => Expr::Binary {
    op,
    lhs: Box::new(lhs),
    rhs: Box::new(rhs),
  },
  <expr: RelExpr> => <>,
};

EqOp: Span<BinaryOp> = {
  <start:@L> "==" <end:@R> => BinaryOp::Eq.into_span(start, end),
  <start:@L> "!=" <end:@R> => BinaryOp::Ne.into_span(start, end),
};

LAndExpr: Expr = {
  <lhs: LAndExpr> <start:@L> "&&" <end:@R> <rhs: EqExpr> => Expr::Binary {
    op: BinaryOp::LAnd.into_span(start, end),
    lhs: Box::new(lhs),
    rhs: Box::new(rhs),
  },
  <expr: EqExpr> => <>,
};

LOrExpr: Expr = {
  <lhs: LOrExpr> <start:@L> "||" <end:@R> <rhs: LAndExpr> => Expr::Binary {
    op: BinaryOp::LOr.into_span(start, end),
    lhs: Box::new(lhs),
    rhs: Box::new(rhs),
  },
  <expr: LAndExpr> => <>,
};

Number: Span<i32> = <start:@L> <num: IntConst> <end:@R> => num.into_span(start, end);

Ident: Span<String> = <start:@L> <ident: r"[a-zA-Z_][a-zA-Z0-9_]*"> <end:@R> => 
  ident.to_string().into_span(start, end);

IntConst: i32 = {
  r"[1-9][0-9]*" => <>.parse::<i32>().unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
